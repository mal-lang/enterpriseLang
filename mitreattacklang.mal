category Person {
  asset User {
    | stolenCredentials
      ->  computer.sendData,
          adversary.compressData,
          adversary.obfuscateData,
          editFile,
          commandlineUsage,
          connectToVpn
    | linkClicked [UniformDistribution(20,1)]
      rationale: "20 % link https://faui1-files.cs.fau.de/filepool/publications/zina/2017-benenson-unpacking-spear-phishing.pdf"
      -> browser.spearphishingLink
    | adminLogin
      -> adminCheck
    & adminCheck
       -> administrator.adminRights,
        os.adminTerminal
    # adminAccess
      -> adminCheck
    | userCredential 
      -> employee.userLogin
    | editFile
      -> computer.deleteFiles
    | commandlineUsage
      -> os.policyDiscovery
    | runCode
      -> windows.dynamicLinkLibraryInjection,
        windows.portableExecutableInjection,
        windows.threadExecutionHijacking,
        windows.asynchronousProcedureCall,
        windows.threadLocalStorage,

        linux.ldLibraryPath,
        linux.vdsoHijacking,
        linux.readOrWriteMem,
        linux.ldPreload,
        linux.ptraceSystemCalls,

        macOS.ptraceSystemCalls,
        macOS.readOrWriteMem,
        macOS.vdsoHijacking,
        macOS.dyldInsertLibraies,

        os.runFile
    | connectToVpn
      -> externalNetwork.connectToVpn        
  }
  asset Administrator {
    | adminRights
        info: "access to one sudo password"
        -> runCodeAdmin
    | runCodeAdmin
      -> computer.infectedComputer
  }
  asset Adversary {
    | compressData
      -> externalNetwork.sendInfo
    | obfuscateData
      -> externalNetwork.sendInfoSecretly
    | spearphishingLinkAttack
      -> browser.spearphishingLink,
        user.linkClicked
    | insertInfectedMedia
      -> removableMedia.infectedMedia,
        employeeThirdParty.insertMedia,
        employee.insertMedia
    | thirdPartySystemAccess
      -> networkUnitThirdParty.connectedToLocalNetwork
    | useHardwareTool
      -> adversaryHardwareTool.networkTapping 
    | spearphishingViaService
      -> employee.socialEngineering 
    | supplyChainCompromiseAttack
      -> supplyChain.supplyChainCompromise
  }
  asset Employee {
    | insertMedia
      -> removableMedia.connected
    | removeMedia 
      -> insertMedia
    | userLogin
      -> loginCheck
    & loginCheck
      -> user.adminLogin
    # passwordEncryption
      -> loginCheck
    & socialEngineering 
      -> privateComputer.infectedComputer,
        user.stolenCredentials
    # restrictSiteAndPrograms
      -> socialEngineering
  }
}


category Hardware {
  abstractAsset Computer {
    | connectedToNetwork
      info: "To be used to ensure that computers must be connected to be able to send data via the internet"
      -> privateNetwork.connectedToNetwork
    | sendData
        -> externalNetwork.sendInfo,
          externalNetwork.sendInfoSecretly
    | infectedComputer
        -> externalNetwork.sendInfo,
          removableMedia.infectedMedia, 
          collectAudio,
          adversary.compressData,
          adversary.obfuscateData,
          linux.bashHistory,
          macOS.bashHistory
    | deleteFiles

    | haveMicrphone
      -> collectAudio

    & collectAudio
      -> sendData
  }

  asset PrivateComputer extends Computer{

  }

  asset ExternalNetwork {
      &  networkIntrusionDetectionAndPreventionSystemsCheck
        -> upload
      # networkIntrusionDetectionAndPreventionSystems
        -> networkIntrusionDetectionAndPreventionSystemsCheck
      | upload

      | collectSendInfo
        -> networkIntrusionDetectionAndPreventionSystemsCheck

      | sendInfo 
        -> collectSendInfo

      | sendInfoSecretly
        -> collectSendInfo
            
      | downloadeFile
        -> computer.infectedComputer

      | vpnExternalConnection
        -> privateNetwork.vpnInternalConnection
      & connectToVpn
        -> vpnExternalConnection
      # multiFactorAuthentication
        -> connectToVpn
        
  }
  asset PrivateNetwork {
    |connectedToNetwork
      -> connectToOtherComputer
    | connectToOtherComputer
      info: "problem"
    | vpnInternalConnection
  }
  asset RemovableMedia {
    | infectedMedia
      -> connected
    & connected
      -> os.autoRun
  }
  asset AdversaryHardwareTool {
    | networkTapping
     -> externalNetwork.upload,
      externalNetwork.downloadeFile
  }
}

category Software {
  asset Browser {
    | spearphishingLink 
      -> detectionCheck
    & detectionCheck
      -> os.downloaded, 
         user.stolenCredentials
    # phishingDetection 
      -> detectionCheck
    
  }
  abstractAsset OS {
    | downloaded 
      -> antivirusCheck
    & antivirusCheck
        -> runFile,
          externalNetwork.downloadeFile
    # antivirus
      -> antivirusCheck
    | runFile
        -> computer.infectedComputer
    | autoRun
      -> autoRunDisabledCheck
    & autoRunDisabledCheck
      -> runFile
    # autoRunDisabled
      -> autoRunDisabledCheck
    | policyDiscovery
        -> computer.sendData
    | commandLineInterface
      -> adminTerminal
    & adminTerminal
      -> computer.infectedComputer
    | infectedOS
      -> computer.infectedComputer
    & clipboardData
      -> user.adminLogin,
        user.stolenCredentials
        // data copromos or data collect?
    # whiteListforClipboard
      -> clipboardData
  }
  asset Linux extends OS {
    | ptraceSystemCalls
      ->  administrator.runCodeAdmin
    | vdsoHijacking
      ->  administrator.runCodeAdmin
    | ldPreload
      ->  administrator.runCodeAdmin
    | ldLibraryPath
      ->  administrator.runCodeAdmin
    | readOrWriteMem
      ->  administrator.runCodeAdmin
    &  bashHistory 
      -> linxUser.adminLogin,
        linxUser.stolenCredentials
    # turnOfBashHistory
      -> bashHistory
  }
  asset MacOS extends OS {
    | ptraceSystemCalls
      ->  administrator.runCodeAdmin
    | vdsoHijacking
      ->  administrator.runCodeAdmin
    | dyldInsertLibraies
      ->  administrator.runCodeAdmin
    | readOrWriteMem
      ->  administrator.runCodeAdmin
    &  bashHistory 
      -> macUser.adminLogin,
        macUser.stolenCredentials
    # turnOfBashHistory
      -> bashHistory       
  }
  asset Windows extends OS {
    | dynamicLinkLibraryInjection
      info: "Another process with all its threads is running inside another virtual address space"
      ->  administrator.runCodeAdmin
    | portableExecutableInjection
      ->  administrator.runCodeAdmin
    | threadExecutionHijacking 
      ->  administrator.runCodeAdmin
    | asynchronousProcedureCall
      ->  administrator.runCodeAdmin
    | threadLocalStorage  
      ->  administrator.runCodeAdmin
  }
}

category ThirdParty {
  asset NetworkUnitThirdParty{
    | connectedToLocalNetwork
      -> privateNetwork.connectedToNetwork 
  }  

  asset EmployeeThirdParty {
    | insertMedia
      -> removableMedia.connected
    | removeMedia 
      -> insertMedia
  }

  asset SupplyChain {
   &  supplyChainCompromise
      -> computer.infectedComputer
    # supplyChainRiskManagementSCRM
      -> supplyChainCompromise
  }
}

associations {
  Computer [computer] 1-* <-- system --> 1-* [os] OS
  Computer [computer] 1-* <-- system --> 1 [externalNetwork] ExternalNetwork
  Computer [computer] 1-* <-- system --> 1-* [removableMedia] RemovableMedia
  Computer [computer] 1-* <-- system --> 1-* [privateNetwork] PrivateNetwork
  ExternalNetwork [externalNetwork] 1 <-- system --> 1 [os] OS
  RemovableMedia [removableMedia] 1 <-- system --> 1 [os] OS
  NetworkUnitThirdParty [networkUnitThirdParty] 1-* <-- system --> 1-* [privateNetwork] PrivateNetwork
  SupplyChain [supplyChain] 1-* <-- system --> 1-* [computer] Computer
  Linux [linux] 1-* <-- system --> 1-* [linuxComputer] Computer
  Windows [windows] 1-* <-- system --> 1-* [windowsComputer] Computer
  MacOS [macOS] 1-* <-- system --> 1-* [macComputer] Computer
  
  ExternalNetwork [externalNetwork] 1-* <-- ui --> 1-* [adversaryHardwareTool] AdversaryHardwareTool
  ExternalNetwork [externalNetwork] 1-* <-- ui --> 1-* [privateNetwork] PrivateNetwork
  Administrator [administrator] 1-* <-- ui --> 1-* [computer] Computer
  Browser [browser] 1-* <-- ui --> 1-* [user] User
  Administrator [administrator] 1-* <-- ui --> 1-* [os] OS
  RemovableMedia [removableMedia] 1-* <-- ui --> 1-* [employee] Employee
  RemovableMedia [removableMedia] 1-* <-- ui --> 1-* [employeeThirdParty] EmployeeThirdParty
  Computer [computer] 1-* <-- ui --> 1-* [user] User
  User [user] 1-* <-- ui --> 1-* [os] OS
  User [winUser] 1-* <-- ui --> 1-* [windows] Windows
  User [linxUser] 1-* <-- ui --> 1-* [linux] Linux  
  User [macUser] 1-* <-- ui --> 1-* [macOS] MacOS
  User [linxUser] 1-* <-- ui --> 1-* [externalNetwork] ExternalNetwork 
  Administrator [administrator] 1 <-- system --> 1 [externalNetwork] ExternalNetwork
  Adversary [adversary] 1-* <-- ui --> 1-* [computer] Computer
  Adversary [adversary] 1-* <-- ui --> 1-* [removableMedia] RemovableMedia
  Adversary [adversary] 1-* <-- ui --> 1-* [networkUnitThirdParty] NetworkUnitThirdParty
  Adversary [adversary] 1-* <-- ui --> 1-* [adversaryHardwareTool] AdversaryHardwareTool
  PrivateComputer [privateComputer] 1-* <-- ui --> 1-* [employee] Employee

  OS [os] 1-* <-- software --> 1-* [browser] Browser
  
  User [user] 1-* <-- use --> 1-* [administrator] Administrator
  User [user] 1 <-- use --> 1 [employee] Employee 
  User [user] 1-* <-- use --> 1-* [adversary] Adversary
  Employee [employee] 1-* <-- use --> 1-* [adversary] Adversary
  EmployeeThirdParty [employeeThirdParty] 1-* <-- use --> 1-* [adversary] Adversary
  
  Adversary [adversary] 1-* <-- attack --> 1-* [browser] Browser
  ExternalNetwork [externalNetwork] 1-* <-- attack --> 1-* [adversary] Adversary
  Adversary [adversary] 1-* <-- attack --> 1-* [supplyChain] SupplyChain
}