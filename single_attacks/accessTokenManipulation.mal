category Person {
    asset User {
        | userRights
            ->  windows.userAccessTokenManipulation
    }   

    asset Administrator {
        | adminRights
            info: "Administrator is an actual account."

        # privilegedAccountManagement
            info: "https://attack.mitre.org/mitigations/M1026/"
            ->  windows.userAccessTokenManipulation,
                windows.adminAccessTokenManipulation
    }       

    asset WindowsAdmin extends Administrator {
        | adminRights
            info: "WindowsAdmin account is equivalent to Unix Root account."
            +>  windowsWindowsAdmin.adminAccessTokenManipulation
    }               
}

category Software {
    asset Service {
        | _exploitationForPrivilegeEscalation
    }      

    abstractAsset OS {
     
    } 

    asset Windows extends OS {   
        & logonScripts
            info: "An adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread."
            ->  userAccessTokenManipulation,
                adminAccessTokenManipulation

        & userAccessTokenManipulation
            info: "Adversaries may use access tokens to operate under a different user or system security context to perform actions and evade detection."
            ->  service._exploitationForPrivilegeEscalation

        & adminAccessTokenManipulation
            info: "Adversaries may use access tokens to operate under a different user or system security context to perform actions and evade detection."
            ->  service._exploitationForPrivilegeEscalation
    } 
}
  
associations {    
    User [windowsUser] 1 <--Ui--> 1-* [windows] Windows
    Administrator [windowsAdministrator] 1 <--Ui--> 1-* [windows] Windows
    WindowsAdmin [windowsAdmin] 1-* <--Ui--> 1 [windowsWindowsAdmin] Windows
    Windows [windows] 1 <--Contain--> 1-* [service] Service
}











